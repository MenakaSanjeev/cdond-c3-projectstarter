version: 2.1

#orbs:
#  slack: circleci/slack@4.4.4

commands:
  #destroy_environment:
  #  description: Destroy Cloud Formation Stacks and infrastructure
  #  parameters:
  #    ID:
  #      type: string
  #  steps:
  #    - run:
  #        name: Destroy failed environments
  #        when: on_fail
  #        command: |
  #          echo << parameters.ID >>
            # First, we have to empty S3 before delete it
  #          aws s3 rm --recursive s3://udapeople-<< parameters.ID >>
            # then remove frontend, backend stack
  #          aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.ID >>
  #          aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.ID >>

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            # exit 1
            cd frontend
            npm i
            npm run build 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             # exit 1
             cd backend
             npm i
             npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Run Frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Run Backend test
          command: |
            cd backend
            npm install 
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Frontend scan
          command: |
            cd frontend
            npm install
            #npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force  
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force 
            #npm audit --audit-level=critical  
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Ensure frontend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # this only output the backend IP of this build
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[].Instances[].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Add tar
          command: yum install -y tar
      - run:
          name: Add gzip
          command: yum install -y gzip
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      #- destroy_environment:
      #    ID: ${CIRCLE_WORKFLOW_ID:0:7}
          #when: on_fail 

  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b3:fe:1b:46:cf:8c:db:4f:c6:d0:50:a7:73:00:f7:2d"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: .circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      #- destroy_environment:
       #   ID: ${CIRCLE_WORKFLOW_ID:0:7}
          #when: on_fail

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            #sudo apt install npm
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      #- run:
      #    name: Run migrations
          #working_directory: ./backend
      #    command: |
      #      cd backend
      #      npm install
      #      npm run migrations > migration_dump.txt
      #- run:
      #    name: Send migration results to memstash
      #    working_directory: ./backend
      #    command: |
      #      if grep -q "has been executed successfully" migration_dump.txt
      #      then
      #        echo "DB migration was successful, will update memstash..."
      #        curl -H "Content-Type: text/plain" -H "token: 4d6c61e0-e2a1-4cf9-b762-9c7298c3c588" --request PUT --data "success" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
      #      else
      #        echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
      #        curl -H "Content-Type: text/plain" -H "token: 4d6c61e0-e2a1-4cf9-b762-9c7298c3c588" --request PUT --data "failure" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
      #      fi
      #      echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migrations_dump.txt
            then
              echo "DB migration was successful, will update memstash..."
              curl -H "Content-Type: text/plain" -H "token: 4d6c61e0-e2a1-4cf9-b762-9c7298c3c588" --request PUT --data "success" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl -H "Content-Type: text/plain" -H "token: 4d6c61e0-e2a1-4cf9-b762-9c7298c3c588" --request PUT --data "failure" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      #- destroy_environment:
      #    ID: ${CIRCLE_WORKFLOW_ID:0:7}
      #    when: on_fail
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: update
          command: |  
            sudo apt update && sudo apt upgrade            
            sudo apt install curl
      - run:
          name: Install aws
          command: |                        
            sudo apt-get install python python-pip
            sudo pip install awscli
            aws --version
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[0].Instances[0].PublicIpAddress' --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text) 
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure  
    #  - revert-migrations:
    #      event: on_fail
    #  - destroy-environment:
    #      event: on_fail
      - run:
          name: Build Success
          when: on_success
          command: |
            curl -H "Content-Type: text/plain" -H "token: 4d6c61e0-e2a1-4cf9-b762-9c7298c3c588" --request PUT --data "1" https://api.memstash.io/values/frontend_${CIRCLE_WORKFLOW_ID:0:7}
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
         fingerprints: ["b3:fe:1b:46:cf:8c:db:4f:c6:d0:50:a7:73:00:f7:2d"] 
      - attach_workspace:
         at: ~/
        #- update-and-install-dependencies   
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk update
            apk upgrade
            apk add unzip 
            apk add curl
            /usr/local/bin/python -m pip install --upgrade pip    
      - run:
          name: Install node
          command: |
            apk add --update nodejs nodejs-npm
            node --version
            npm --version
      - run:
          name: Install ansible
          command: |
            # your code here              
            apk add --update ansible 
            ansible --version
      - run:
          name: Install aws
          command: |
            # your code here              
            # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            # unzip awscliv2.zip
            # ./aws/install -i /usr/local/aws -b /usr/local/bin/aws
            # aws --version        
            pip install awscli --upgrade   
            aws --version       
      - run:
          name: Deploy backend
          command: |
            # your code here
            echo "cd backend -------"
            cd backend
            echo "npm install -------"
            npm i
            npm run build
            cd ..
            # Zip the directory
            echo "zip the directory -------"
            tar -C backend -czvf artifact.tar.gz .
            echo "mv artifac to ansibble -------"
            mv artifact.tar.gz .circleci/ansible/
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      #- revert-migrations:
      #    event: on_fail
            
      #- destroy-environment:
      #    event: on_fail
  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: circleci/node:13.8.0  #python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout 
      - run:
          name: Install dependencies
          command: |
            # your code here            
            #pip install awscli
            sudo apt update #apk add --update curl nodejs npm
            sudo apt install -y awscli
            sudo apt install -y python3 ansible
      - run:
          name: Backend smoke test.
          command: |
            # Fetch and prepare the BACKEND_IP env var
            export BACKEND_IP=$(aws ec2 describe-instances --region us-east-1  \
                --filters "Name=tag:Name, Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query "Reservations[].Instances[*].PublicIpAddress" \
                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            curl -s "${API_URL}/api/status"
            if curl  -s "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
            
     # - destroy-environment:
     #     workflowId: ${CIRCLE_WORKFLOW_ID:0:7}
     # - revert-migrations

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:6}.s3-website-us-east-1.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              exit 1
            else
              exit 1
            fi
     # - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}
     # - revert-migrations
  #deploy-backend:
  #  docker:
  #    - image: python:3.9.0-alpine
  #  steps:
  #    - checkout
  #    - add_ssh_keys:
  #        fingerprints: 
  #          - "19:57:a1:a2:5c:d0:ac:07:6b:54:cd:5b:e3:ac:7a:14"
  #    - attach_workspace:
  #        at: .
  #    - run:
  #        name: Install dependencies
  #        working_directory: /tmp
  #        command: |
  #          apk add --update ansible curl rsync openssh nodejs npm
  #          ansible --version
  #          pip install awscli
  #          aws --version
  #    - run:
  #        name: Deploy backend
  #      #  working_directory: .circleci
  #        command: |
  #          cd backend
  #          npm i
  #          npm run build
  #          cd ..
  #          tar -C backend -czvf artifact.tar.gz .
  #          cd .circleci/ansible
  #          echo "Contents of the inventory.txt file is ------"
  #          cat inventory.txt
  #          ansible-playbook -i inventory.txt deploy-backend.yml
      #- destroy_environment:
      #    ID: ${CIRCLE_WORKFLOW_ID:0:7}
         # when: on_fail
      #- revert_migrations:
      #    ID: ${CIRCLE_WORKFLOW_ID:0:7}
          #when: on_fail

  #smoke-test:
  #  docker:
  #    - image: python:3.9.0-alpine
  #  steps:
  #    - checkout
  #    - attach_workspace:
  #        at: .
  #    - run:
  #        name: Install dependencies
  #        working_directory: /tmp
  #        command: |
  #          apk add --update curl nodejs npm
  #          pip install awscli
  #    - run:
  #        name: Backend smoke test.
  #        working_directory: ./backend
  #        command: |
  #          export BACKEND_URL=$(curl -H "token: 4d6c61e0-e2a1-4cf9-b762-9c7298c3c588" --request GET https://api.memstash.io/values/BACKEND_URL)
  #          curl "$BACKEND_URL/api/status"
  #    - run:
  #        name: Frontend smoke test.
  #        working_directory: ./backend
  #        command: |
  #          URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.eu-central-1.amazonaws.com/index.html"
  #          curl -s ${URL} | grep -q "Welcome"
     # - destroy_environment:
     #     id: ${CIRCLE_WORKFLOW_ID:0:7}
     #     when: on_fail
     # - revert_migrations:
     #     id: ${CIRCLE_WORKFLOW_ID:0:7}
     #     when: on_fail
                 
 # notify:
 #   docker:
 #     - image: 'cimg/base:stable'
 #   steps:
 #     - slack/notify:
 #         custom: |
 #           {
 #             "blocks": [
 #               {
 #                 "type": "section",
 #                 "fields": [
 #                   {
 #                     "type": "plain_text",
 #                     "text": "*This is a text notification*",
 #                     "emoji": true
 #                   }
 #                 ]
 #               }
 #             ]
 #           }
 #         event: always
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - run-migrations:
          requires:
            - test-backend
            - test-frontend
            - scan-backend
            - scan-frontend
            - configure-infrastructure
          filters:
            branches:
              only:
                - master
      - deploy-frontend:
          requires:
            - run-migrations
      - deploy-backend:
          requires:
            - run-migrations      
      #- smoke-test:
      #    requires:
      #      - deploy-backend
      #      - deploy-frontend

  #send-notification:
  #  jobs:
  #    - notify:
  #        context: slack-secrets

