version: 2.1

#orbs:
#  slack: circleci/slack@4.4.4

commands:
  destroy_environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      ID:
        type: string
    steps:
      - run:
          name: Destroy failed environments
          when: on_fail
          command: |
            echo << parameters.ID >>
            # First, we have to empty S3 before delete it
            aws s3 rm --recursive s3://udapeople-<< parameters.ID >>
            # then remove frontend, backend stack
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.ID >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.ID >>

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            # exit 1
            cd frontend
            npm i
            npm run build 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             # exit 1
             cd backend
             npm i
             npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Run Frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Run Backend test
          command: |
            cd backend
            npm install 
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Frontend scan
          command: |
            cd frontend
            npm install
            #npm audit --audit-level=critical
            npm audit fix --audit-level=critical --force  
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force 
            #npm audit --audit-level=critical  
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Ensure frontend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # this only output the backend IP of this build
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[].Instances[].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run:
          name: Add tar
          command: yum install -y tar
      - run:
          name: Add gzip
          command: yum install -y gzip
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy_environment:
          ID: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail 

configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
      # Docker image here that supports Ansible
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["20:3a:c1:af:4d:4e:ba:1d:05:15:5c:56:9d:0c:86:67:3a:31:27:c0"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory
            ansible-playbook -i inventory.txt configure-server.yaml
      - destroy_environment:
          ID: ${CIRCLE_WORKFLOW_ID:0:7}
          #when: on_fail
                 
 # notify:
 #   docker:
 #     - image: 'cimg/base:stable'
 #   steps:
 #     - slack/notify:
 #         custom: |
 #           {
 #             "blocks": [
 #               {
 #                 "type": "section",
 #                 "fields": [
 #                   {
 #                     "type": "plain_text",
 #                     "text": "*This is a text notification*",
 #                     "emoji": true
 #                   }
 #                 ]
 #               }
 #             ]
 #           }
 #         event: always
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
  #send-notification:
  #  jobs:
  #    - notify:
  #        context: slack-secrets

